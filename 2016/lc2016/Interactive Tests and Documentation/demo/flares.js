// Generated by psc-bundle 0.8.5.0
var PS = {};
(function(exports) {
  // module Color
  // jshint node: true

  "use strict";

  // Parse a string which guaranteed to be of the form `[0-9a-f]{1,2}`.
  exports.parseHex = function(str) {
    return parseInt(str, 16);
  };

  // Convert a number between 0 and 255 to a hex value between 00 and ff.
  exports.toHex = function(n) {
    var str = n.toString(16);
    if (str.length == 1) {
      return "0" + str;
    }
    return str;
  };
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Bind -----------------------------------------------------------------------

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.div = div;
      this.mod = mod;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var Show = function (show) {
      this.show = show;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  }; 
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Prelude line 842, column 3 - line 843, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };             
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  }; 
  var moduloSemiringNumber = new ModuloSemiring(function () {
      return semiringNumber;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });                                  
  var mod = function (dict) {
      return dict.mod;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqString = new Eq($foreign.refEq);
  var ordString = new Ord(function () {
      return eqString;
  }, unsafeCompare);
  var eqNumber = new Eq($foreign.refEq);
  var ordNumber = new Ord(function () {
      return eqNumber;
  }, unsafeCompare);
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  }; 
  var div = function (dict) {
      return dict.div;
  };
  var $div = function (dictModuloSemiring) {
      return div(dictModuloSemiring);
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var $less = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $80 = compare(dictOrd)(a1)(a2);
              if ($80 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $less$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $81 = compare(dictOrd)(a1)(a2);
              if ($81 instanceof GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  var monadArray = new Monad(function () {
      return applicativeArray;
  }, function () {
      return bindArray;
  });
  var bindArray = new Bind(function () {
      return applyArray;
  }, $foreign.arrayBind);
  var applyArray = new Apply(function () {
      return functorArray;
  }, ap(monadArray));
  var applicativeArray = new Applicative(function () {
      return applyArray;
  }, function (x) {
      return [ x ];
  });
  var add = function (dict) {
      return dict.add;
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["ModuloSemiring"] = ModuloSemiring;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports["<="] = $less$eq;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["/"] = $div;
  exports["mod"] = mod;
  exports["div"] = div;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["applyArray"] = applyArray;
  exports["applicativeArray"] = applicativeArray;
  exports["bindArray"] = bindArray;
  exports["monadArray"] = monadArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semiringNumber"] = semiringNumber;
  exports["moduloSemiringNumber"] = moduloSemiringNumber;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["boundedInt"] = boundedInt;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var join = function (dictBind) {
      return function (m) {
          return Prelude[">>="](dictBind)(m)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["join"] = join;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];        
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 27, column 1 - line 28, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                   
  var isJust = maybe(false)(Prelude["const"](true));
  var functorMaybe = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 122, column 3 - line 123, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Prelude.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 181, column 3 - line 182, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($161) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($161));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Prelude.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $91 = cmp(v.value0)(v1);
                          if ($91 instanceof Prelude.LT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 261, column 3 - line 262, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 108, column 3 - line 109, column 3: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 106, column 3 - line 107, column 3: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 104, column 3 - line 105, column 3: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["minimumBy"] = minimumBy;
  exports["intercalate"] = intercalate;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Prelude.apply(dictApplicative["__superclass_Prelude.Apply_0"]()))(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["sequenceDefault"] = sequenceDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];        
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 11, column 1 - line 12, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $dot$dot = $foreign.range;
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($69) {
          return Data_Maybe.maybe([  ])(singleton)(f($69));
      });
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["concatMap"] = concatMap;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["null"] = $$null;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["slice"] = $foreign.slice;
  exports["filter"] = $foreign.filter;
  exports["length"] = $foreign.length;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringImpl = function (just) {
    return function (nothing) {
      return function (s) {
        /* jshint bitwise: false */
        var i = parseFloat(s);
        return (i | 0) === i ? just(i) : nothing;
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };                       

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
  exports["%"] = $foreign["%"];
  exports["sqrt"] = $foreign.sqrt;
  exports["sin"] = $foreign.sin;
  exports["round"] = $foreign.round;
  exports["pow"] = $foreign.pow;
  exports["floor"] = $foreign.floor;
  exports["cos"] = $foreign.cos;
  exports["atan2"] = $foreign.atan2;
  exports["abs"] = $foreign.abs;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];
  var fromString = $foreign.fromStringImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 49, column 1 - line 56, column 1: " + [ x.constructor.name ]);
  };
  var round = function ($1) {
      return unsafeClamp($$Math.round($1));
  };
  var floor = function ($2) {
      return unsafeClamp($$Math.floor($2));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  exports["even"] = even;
  exports["fromString"] = fromString;
  exports["round"] = round;
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $39 = Prelude.compare(dictOrd)(x)(y);
              if ($39 instanceof Prelude.LT) {
                  return x;
              };
              if ($39 instanceof Prelude.EQ) {
                  return x;
              };
              if ($39 instanceof Prelude.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 60, column 3 - line 67, column 1: " + [ $39.constructor.name ]);
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $42 = Prelude.compare(dictOrd)(x)(y);
              if ($42 instanceof Prelude.LT) {
                  return y;
              };
              if ($42 instanceof Prelude.EQ) {
                  return x;
              };
              if ($42 instanceof Prelude.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 69, column 3 - line 81, column 1: " + [ $42.constructor.name ]);
          };
      };
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return Data_Function.on(Prelude.compare(dictOrd))(f);
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return Prelude["<="](dictOrd)(low)(x) && Prelude["<="](dictOrd)(x)(hi);
              };
          };
      };
  };
  exports["max"] = max;
  exports["min"] = min;
  exports["between"] = between;
  exports["clamp"] = clamp;
  exports["comparing"] = comparing;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._charCodeAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charCodeAt(i)) : nothing;
        };
      };
    };
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["toCharCode"] = $foreign.toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];                                          
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var contains = function (x) {
      return function (s) {
          return Data_Maybe.isJust(indexOf(x)(s));
      };
  };
  var charCodeAt = $foreign._charCodeAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["contains"] = contains;
  exports["charCodeAt"] = charCodeAt;
  exports["split"] = $foreign.split;
  exports["length"] = $foreign.length;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports["regex'"] = function (s1) {
    return function (s2) {
      return new RegExp(s1, s2);
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];                                            
  var renderFlags = function (f) {
      return (function () {
          if (f.global) {
              return "g";
          };
          if (!f.global) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 65, column 4 - line 65, column 32: " + [ f.global.constructor.name ]);
      })() + ((function () {
          if (f.ignoreCase) {
              return "i";
          };
          if (!f.ignoreCase) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 66, column 4 - line 66, column 36: " + [ f.ignoreCase.constructor.name ]);
      })() + ((function () {
          if (f.multiline) {
              return "m";
          };
          if (!f.multiline) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 67, column 4 - line 67, column 35: " + [ f.multiline.constructor.name ]);
      })() + ((function () {
          if (f.sticky) {
              return "y";
          };
          if (!f.sticky) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 68, column 4 - line 68, column 32: " + [ f.sticky.constructor.name ]);
      })() + (function () {
          if (f.unicode) {
              return "u";
          };
          if (!f.unicode) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 69, column 4 - line 69, column 33: " + [ f.unicode.constructor.name ]);
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return {
          global: Data_String.contains("g")(s), 
          ignoreCase: Data_String.contains("i")(s), 
          multiline: Data_String.contains("m")(s), 
          sticky: Data_String.contains("y")(s), 
          unicode: Data_String.contains("u")(s)
      };
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["match"] = match;
  exports["parseFlags"] = parseFlags;
  exports["renderFlags"] = renderFlags;
  exports["regex"] = regex;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Color"];
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var $$Math = PS["Math"];        
  var RGB = (function () {
      function RGB() {

      };
      RGB.value = new RGB();
      return RGB;
  })();
  var HSL = (function () {
      function HSL() {

      };
      HSL.value = new HSL();
      return HSL;
  })();
  var LCh = (function () {
      function LCh() {

      };
      LCh.value = new LCh();
      return LCh;
  })();
  var Lab = (function () {
      function Lab() {

      };
      Lab.value = new Lab();
      return Lab;
  })();
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var toRGBA$prime = function (v) {
      var h$prime = v.value0 / 60.0;
      var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
      var m = v.value2 - chr / 2.0;
      var x = chr * (1.0 - $$Math.abs($$Math["%"](h$prime)(2.0) - 1.0));
      var col = (function () {
          if (h$prime < 1.0) {
              return {
                  r: chr, 
                  g: x, 
                  b: 0.0
              };
          };
          if (1.0 <= h$prime && h$prime < 2.0) {
              return {
                  r: x, 
                  g: chr, 
                  b: 0.0
              };
          };
          if (2.0 <= h$prime && h$prime < 3.0) {
              return {
                  r: 0.0, 
                  g: chr, 
                  b: x
              };
          };
          if (3.0 <= h$prime && h$prime < 4.0) {
              return {
                  r: 0.0, 
                  g: x, 
                  b: chr
              };
          };
          if (4.0 <= h$prime && h$prime < 5.0) {
              return {
                  r: x, 
                  g: 0.0, 
                  b: chr
              };
          };
          if (Prelude.otherwise) {
              return {
                  r: chr, 
                  g: 0.0, 
                  b: x
              };
          };
          throw new Error("Failed pattern match at Color line 295, column 1 - line 313, column 1: " + [  ]);
      })();
      return {
          r: col.r + m, 
          g: col.g + m, 
          b: col.b + m, 
          a: v.value3
      };
  };
  var toXYZ = function (c) {
      var rec = toRGBA$prime(c);
      var finv = function (c1) {
          if (c1 <= 4.045e-2) {
              return c1 / 12.92;
          };
          if (Prelude.otherwise) {
              return $$Math.pow((c1 + 5.500000000000001e-2) / 1.055)(2.4);
          };
          throw new Error("Failed pattern match at Color line 314, column 1 - line 331, column 1: " + [ c1.constructor.name ]);
      };
      var g = finv(rec.g);
      var r = finv(rec.r);
      var b = finv(rec.b);
      var x = 0.4124 * r + 0.35760000000000003 * g + 0.18050000000000002 * b;
      var y = 0.21259999999999998 * r + 0.7152000000000001 * g + 7.22e-2 * b;
      var z = 1.93e-2 * r + 0.1192 * g + 0.9505000000000001 * b;
      return {
          x: x, 
          y: y, 
          z: z
      };
  };
  var toRGBA = function (v) {
      var c = toRGBA$prime(v);
      var g = Data_Int.round(255.0 * c.g);
      var r = Data_Int.round(255.0 * c.r);
      var b = Data_Int.round(255.0 * c.b);
      return {
          r: r, 
          g: g, 
          b: b, 
          a: v.value3
      };
  };
  var toHexString = function (color) {
      var c = toRGBA(color);
      return "#" + ($foreign.toHex(c.r) + ($foreign.toHex(c.g) + $foreign.toHex(c.b)));
  };
  var toHSLA = function (v) {
      return {
          h: v.value0, 
          s: v.value1, 
          l: v.value2, 
          a: v.value3
      };
  }; 
  var modPos = function (x) {
      return function (y) {
          return $$Math["%"]($$Math["%"](x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Prelude.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Prelude.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Prelude.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Prelude.ordInt)(Data_Ord.max(Prelude.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Prelude.ordInt)(Data_Ord.min(Prelude.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Prelude.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color line 119, column 1 - line 150, column 1: " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Prelude.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color line 119, column 1 - line 150, column 1: " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  var rgba$prime = function (r) {
      return function (g) {
          return function (b) {
              return function (a) {
                  return rgba(Data_Int.round(r * 255.0))(Data_Int.round(g * 255.0))(Data_Int.round(b * 255.0))(a);
              };
          };
      };
  };
  var rgb$prime = function (r) {
      return function (g) {
          return function (b) {
              return rgba$prime(r)(g)(b)(1.0);
          };
      };
  };
  var xyz = function (x) {
      return function (y) {
          return function (z) {
              var f = function (c) {
                  if (c <= 3.1307999999999996e-3) {
                      return 12.92 * c;
                  };
                  if (Prelude.otherwise) {
                      return 1.055 * $$Math.pow(c)(1.0 / 2.4) - 5.500000000000001e-2;
                  };
                  throw new Error("Failed pattern match at Color line 194, column 5 - line 196, column 5: " + [ c.constructor.name ]);
              };
              var g = f(-0.9689 * x + 1.8758 * y + 4.15e-2 * z);
              var r = f(3.2406 * x - 1.5372 * y - 0.4986 * z);
              var b = f((5.5700000000000006e-2 * x - 0.20400000000000001 * y) + 1.057 * z);
              return rgb$prime(r)(g)(b);
          };
      };
  };
  var interpolate = function (fraction) {
      return function (a) {
          return function (b) {
              return a + fraction * (b - a);
          };
      };
  };
  var interpolateAngle = function (fraction) {
      return function (a) {
          return function (b) {
              var paths = [ {
                  from: a, 
                  to: b
              }, {
                  from: a, 
                  to: b + 360.0
              }, {
                  from: a + 360.0, 
                  to: b
              } ];
              var dist = function (v) {
                  return $$Math.abs(v.to - v.from);
              };
              var shortest = Data_Maybe_Unsafe.fromJust(Data_Foldable.minimumBy(Data_Foldable.foldableArray)(Data_Ord.comparing(Prelude.ordNumber)(dist))(paths));
              return interpolate(fraction)(shortest.from)(shortest.to);
          };
      };
  };
  var hsla = function (h) {
      return function (s) {
          return function (l) {
              return function (a) {
                  var s$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(s);
                  var l$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(l);
                  var h$prime = modPos(h)(360.0);
                  var a$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(a);
                  return new HSLA(h$prime, s$prime, l$prime, a$prime);
              };
          };
      };
  };
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              return hsla(h)(s)(l)(1.0);
          };
      };
  };
  var fromHexString = function (str) {
      var isShort = Data_String.length(str) === 4;
      var pair = "(" + ("[0-9a-f]" + ("[0-9a-f]" + ")"));
      var single = "(" + ("[0-9a-f]" + ")");
      var variant = (function () {
          if (isShort) {
              return single + (single + single);
          };
          if (!isShort) {
              return pair + (pair + pair);
          };
          throw new Error("Failed pattern match at Color line 257, column 15 - line 260, column 5: " + [ isShort.constructor.name ]);
      })();
      var pattern = Data_String_Regex.regex("^#(?:" + (variant + ")$"))(Data_String_Regex.parseFlags("i"));
      return Prelude.bind(Data_Maybe.bindMaybe)(Data_String_Regex.match(pattern)(str))(function (v) {
          return Prelude.bind(Data_Maybe.bindMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)($foreign.parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array["!!"](v)(1))))(function (v1) {
              return Prelude.bind(Data_Maybe.bindMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)($foreign.parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array["!!"](v)(2))))(function (v2) {
                  return Prelude.bind(Data_Maybe.bindMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)($foreign.parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array["!!"](v)(3))))(function (v3) {
                      if (isShort) {
                          return Prelude.pure(Data_Maybe.applicativeMaybe)(rgb((16 * v1 | 0) + v1 | 0)((16 * v2 | 0) + v2 | 0)((16 * v3 | 0) + v3 | 0));
                      };
                      if (!isShort) {
                          return Prelude.pure(Data_Maybe.applicativeMaybe)(rgb(v1)(v2)(v3));
                      };
                      throw new Error("Failed pattern match at Color line 247, column 3 - line 252, column 3: " + [ isShort.constructor.name ]);
                  });
              });
          });
      });
  };
  var d65 = {
      xn: 0.9504699999999999, 
      yn: 1.0, 
      zn: 1.08883
  };
  var lab = function (l) {
      return function (a) {
          return function (b) {
              var l$prime = (l + 16.0) / 116.0;
              var delta = 6.0 / 29.0;
              var finv = function (t) {
                  if (t > delta) {
                      return $$Math.pow(t)(3.0);
                  };
                  if (Prelude.otherwise) {
                      return 3.0 * delta * delta * (t - 4.0 / 29.0);
                  };
                  throw new Error("Failed pattern match at Color line 213, column 1 - line 229, column 1: " + [ t.constructor.name ]);
              };
              var x = d65.xn * finv(l$prime + a / 500.0);
              var y = d65.yn * finv(l$prime);
              var z = d65.zn * finv(l$prime - b / 200.0);
              return xyz(x)(y)(z);
          };
      };
  };
  var lch = function (l) {
      return function (c) {
          return function (h) {
              var deg2rad = $$Math.pi / 180.0;
              var b = c * $$Math.sin(h * deg2rad);
              var a = c * $$Math.cos(h * deg2rad);
              return lab(l)(a)(b);
          };
      };
  };
  var toLab = function (col) {
      var rec = toXYZ(col);
      var cut = $$Math.pow(6.0 / 29.0)(3.0);
      var f = function (t) {
          if (t > cut) {
              return $$Math.pow(t)(1.0 / 3.0);
          };
          if (Prelude.otherwise) {
              return (1.0 / 3.0) * $$Math.pow(29.0 / 6.0)(2.0) * t + 4.0 / 29.0;
          };
          throw new Error("Failed pattern match at Color line 332, column 1 - line 349, column 1: " + [ t.constructor.name ]);
      };
      var fy = f(rec.y / d65.yn);
      var l = 116.0 * fy - 16.0;
      var b = 200.0 * (fy - f(rec.z / d65.zn));
      var a = 500.0 * (f(rec.x / d65.xn) - fy);
      return {
          l: l, 
          a: a, 
          b: b
      };
  };
  var toLCh = function (col) {
      var rec = toLab(col);
      var rad2deg = 180.0 / $$Math.pi;
      var c = $$Math.sqrt(rec.a * rec.a + rec.b * rec.b);
      var h = modPos($$Math.atan2(rec.b)(rec.a) * rad2deg)(360.0);
      return {
          l: rec.l, 
          c: c, 
          h: h
      };
  };
  var mix = function (v) {
      return function (c1) {
          return function (c2) {
              return function (frac) {
                  if (v instanceof HSL) {
                      var t = toHSLA(c2);
                      var f = toHSLA(c1);
                      return hsla(interpolateAngle(frac)(f.h)(t.h))(interpolate(frac)(f.s)(t.s))(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a));
                  };
                  if (v instanceof RGB) {
                      var t = toRGBA$prime(c2);
                      var f = toRGBA$prime(c1);
                      return rgba$prime(interpolate(frac)(f.r)(t.r))(interpolate(frac)(f.g)(t.g))(interpolate(frac)(f.b)(t.b))(interpolate(frac)(f.a)(t.a));
                  };
                  if (v instanceof LCh) {
                      var t = toLCh(c2);
                      var f = toLCh(c1);
                      return lch(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.c)(t.c))(interpolateAngle(frac)(f.h)(t.h));
                  };
                  if (v instanceof Lab) {
                      var t = toLab(c2);
                      var f = toLab(c1);
                      return lab(interpolate(frac)(f.l)(t.l))(interpolate(frac)(f.a)(t.a))(interpolate(frac)(f.b)(t.b));
                  };
                  throw new Error("Failed pattern match at Color line 473, column 1 - line 482, column 1: " + [ v.constructor.name, c1.constructor.name, c2.constructor.name, frac.constructor.name ]);
              };
          };
      };
  };
  var cssStringHSLA = function (v) {
      var toString = function (n) {
          return Prelude.show(Prelude.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
      };
      var saturation = toString(v.value1 * 100.0) + "%";
      var lightness = toString(v.value2 * 100.0) + "%";
      var hue = toString(v.value0);
      var alpha = Prelude.show(Prelude.showNumber)(v.value3);
      var $68 = v.value3 === 1.0;
      if ($68) {
          return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
      };
      if (!$68) {
          return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
      };
      throw new Error("Failed pattern match at Color line 376, column 3 - line 380, column 3: " + [ $68.constructor.name ]);
  };
  var black = hsl(0.0)(0.0)(0.0);
  exports["RGB"] = RGB;
  exports["HSL"] = HSL;
  exports["LCh"] = LCh;
  exports["Lab"] = Lab;
  exports["mix"] = mix;
  exports["black"] = black;
  exports["cssStringHSLA"] = cssStringHSLA;
  exports["toHexString"] = toHexString;
  exports["toLCh"] = toLCh;
  exports["toLab"] = toLab;
  exports["toXYZ"] = toXYZ;
  exports["toRGBA"] = toRGBA;
  exports["toHSLA"] = toHSLA;
  exports["fromHexString"] = fromHexString;
  exports["lch"] = lch;
  exports["lab"] = lab;
  exports["xyz"] = xyz;
  exports["hsl"] = hsl;
  exports["hsla"] = hsla;
  exports["rgb'"] = rgb$prime;
  exports["rgb"] = rgb;
  exports["rgba"] = rgba;
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match at Data.List line 751, column 3 - line 752, column 3: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 371, column 1 - line 379, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var snoc = function (xs) {
      return function (x) {
          return reverse(new Cons(x, reverse(xs)));
      };
  }; 
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_acc) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (v instanceof Nil) {
                                  return acc;
                              };
                              if (v1 instanceof Nil) {
                                  return acc;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_acc = new Cons(f(v.value0)(v1.value0), acc);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 657, column 1 - line 665, column 1: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 143, column 1 - line 150, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $211 = start > end;
                  if ($211) {
                      return 1;
                  };
                  if (!$211) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 144, column 45 - line 144, column 74: " + [ $211.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 143, column 1 - line 150, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 758, column 3 - line 764, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($374) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($374));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 767, column 3 - line 771, column 3: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 765, column 3 - line 766, column 3: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);                                                   
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(v1))(Prelude["<*>"](applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List line 788, column 3 - line 789, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["toList"] = toList;
  exports["zipWith"] = zipWith;
  exports["reverse"] = reverse;
  exports["snoc"] = snoc;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["fromFoldable"] = fromFoldable;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Ord = PS["Data.Ord"];
  var Color = PS["Color"];
  var Color_Scheme_X11 = PS["Color.Scheme.X11"];
  var Data_Monoid = PS["Data.Monoid"];        
  var ColorStop = (function () {
      function ColorStop(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ColorStop.create = function (value0) {
          return function (value1) {
              return new ColorStop(value0, value1);
          };
      };
      return ColorStop;
  })();
  var ColorScale = (function () {
      function ColorScale(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      ColorScale.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new ColorScale(value0, value1, value2, value3);
                  };
              };
          };
      };
      return ColorScale;
  })();
  var ratio = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0);
  var colorStop = function (c) {
      return function (r) {
          return new ColorStop(c, ratio(r));
      };
  };
  var sample = function (v) {
      return function (x) {
          if (x < 0.0) {
              return v.value1;
          };
          if (x > 1.0) {
              return v.value3;
          };
          if (Prelude.otherwise) {
              var go = function (__copy_v1) {
                  return function (__copy_v2) {
                      return function (__copy_v3) {
                          var v1 = __copy_v1;
                          var v2 = __copy_v2;
                          var v3 = __copy_v3;
                          tco: while (true) {
                              if (v3 instanceof Data_List.Nil) {
                                  return v1;
                              };
                              if (v3 instanceof Data_List.Cons) {
                                  var $39 = Data_Ord.between(Prelude.ordNumber)(v2)(v3.value0.value1)(x);
                                  if ($39) {
                                      var $40 = v2 === v3.value0.value1;
                                      if ($40) {
                                          return v1;
                                      };
                                      if (!$40) {
                                          return Color.mix(v.value0)(v1)(v3.value0.value0)((x - v2) / (v3.value0.value1 - v2));
                                      };
                                      throw new Error("Failed pattern match at Color.Scale line 95, column 14 - line 98, column 9: " + [ $40.constructor.name ]);
                                  };
                                  if (!$39) {
                                      var __tco_v1 = v3.value0.value0;
                                      var __tco_v2 = v3.value0.value1;
                                      var __tco_v3 = v3.value1;
                                      v1 = __tco_v1;
                                      v2 = __tco_v2;
                                      v3 = __tco_v3;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Color.Scale line 94, column 7 - line 102, column 1: " + [ $39.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Color.Scale line 87, column 1 - line 102, column 1: " + [ v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
                          };
                      };
                  };
              };
              return go(v.value1)(0.0)(Data_List.snoc(v.value2)(colorStop(v.value3)(1.0)));
          };
          throw new Error("Failed pattern match at Color.Scale line 87, column 1 - line 102, column 1: " + [ v.constructor.name, x.constructor.name ]);
      };
  };
  var colorScale = ColorScale.create;
  var uniformScale = function (dictFoldable) {
      return function (mode) {
          return function (b) {
              return function (middle) {
                  return function (e) {
                      var cs = Data_List.fromFoldable(dictFoldable)(middle);
                      var len = Data_List.length(cs);
                      var n = 1 + len | 0;
                      var makeStop = function (i) {
                          return function (col) {
                              return colorStop(col)(Data_Int.toNumber(i) / Data_Int.toNumber(n));
                          };
                      };
                      var stops = Data_List.zipWith(makeStop)(Data_List[".."](1)(n))(cs);
                      return colorScale(mode)(b)(stops)(e);
                  };
              };
          };
      };
  };
  exports["sample"] = sample;
  exports["uniformScale"] = uniformScale;
  exports["colorScale"] = colorScale;
  exports["colorStop"] = colorStop;
})(PS["Color.Scale"] = PS["Color.Scale"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.Unsafe

  exports.unsafeIndex = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Array.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var last = function (xs) {
      return $foreign.unsafeIndex(xs)(Data_Array.length(xs) - 1);
  };
  var head = function (xs) {
      return $foreign.unsafeIndex(xs)(0);
  };
  exports["last"] = last;
  exports["head"] = head;
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Color = PS["Color"];
  var Color_Scale = PS["Color.Scale"];
  var Data_Foldable = PS["Data.Foldable"];        
  var matplotlibScale = function (rgbs) {
      var toColor = function (v) {
          if (v.length === 3) {
              return Color["rgb'"](v[0])(v[1])(v[2]);
          };
          return Color["rgb'"](0.0)(0.0)(0.0);
      };
      var stop = toColor(Data_Array_Unsafe.last(rgbs));
      var start = toColor(Data_Array_Unsafe.head(rgbs));
      var middle = Prelude["<$>"](Prelude.functorArray)(toColor)(Data_Array.slice(1)(255)(rgbs));
      return Color_Scale.uniformScale(Data_Foldable.foldableArray)(Color.RGB.value)(start)(middle)(stop);
  };                                       
  var _inferno_data = [ [ 1.462e-3, 4.66e-4, 1.3866e-2 ], [ 2.267e-3, 1.2699999999999999e-3, 1.857e-2 ], [ 3.299e-3, 2.249e-3, 2.4239000000000004e-2 ], [ 4.547e-3, 3.392e-3, 3.0909e-2 ], [ 6.006e-3, 4.692e-3, 3.8557999999999995e-2 ], [ 7.6760000000000005e-3, 6.136000000000001e-3, 4.6836e-2 ], [ 9.561e-3, 7.713e-3, 5.514300000000001e-2 ], [ 1.1663000000000001e-2, 9.417e-3, 6.346e-2 ], [ 1.3994999999999999e-2, 1.1225e-2, 7.186200000000001e-2 ], [ 1.6561e-2, 1.3136e-2, 8.028199999999999e-2 ], [ 1.9373e-2, 1.5133000000000002e-2, 8.8767e-2 ], [ 2.2447e-2, 1.7199e-2, 9.7327e-2 ], [ 2.5793e-2, 1.9331e-2, 0.10593 ], [ 2.9432000000000003e-2, 2.1503e-2, 0.114621 ], [ 3.3385e-2, 2.3702e-2, 0.123397 ], [ 3.7668e-2, 2.5921000000000007e-2, 0.132232 ], [ 4.2253e-2, 2.8138999999999997e-2, 0.14114100000000002 ], [ 4.6915e-2, 3.0324e-2, 0.15016400000000002 ], [ 5.1644e-2, 3.2473999999999996e-2, 0.159254 ], [ 5.644899999999999e-2, 3.4569e-2, 0.168414 ], [ 6.1340000000000006e-2, 3.659e-2, 0.177642 ], [ 6.6331e-2, 3.8504e-2, 0.186962 ], [ 7.142899999999999e-2, 4.0293999999999996e-2, 0.196354 ], [ 7.6637e-2, 4.1905000000000005e-2, 0.205799 ], [ 8.1962e-2, 4.3328e-2, 0.215289 ], [ 8.741099999999999e-2, 4.4556000000000005e-2, 0.224813 ], [ 9.298999999999999e-2, 4.5583e-2, 0.234358 ], [ 9.8702e-2, 4.6402e-2, 0.24390399999999998 ], [ 0.10455099999999999, 4.7008e-2, 0.25343 ], [ 0.11053600000000001, 4.7399000000000004e-2, 0.262912 ], [ 0.11665600000000001, 4.757399999999999e-2, 0.272321 ], [ 0.12290799999999999, 4.7535999999999995e-2, 0.281624 ], [ 0.129285, 4.7293e-2, 0.290788 ], [ 0.135778, 4.6855999999999995e-2, 0.299776 ], [ 0.142378, 4.6242e-2, 0.30855299999999997 ], [ 0.149073, 4.5468e-2, 0.317085 ], [ 0.15585, 4.4559e-2, 0.325338 ], [ 0.162689, 4.3554e-2, 0.333277 ], [ 0.16957499999999998, 4.2489e-2, 0.340874 ], [ 0.176493, 4.1402e-2, 0.348111 ], [ 0.183429, 4.0329e-2, 0.35497100000000004 ], [ 0.190367, 3.9309e-2, 0.36144699999999996 ], [ 0.197297, 3.8400000000000004e-2, 0.367535 ], [ 0.204209, 3.7632e-2, 0.373238 ], [ 0.21109499999999998, 3.703e-2, 0.37856300000000004 ], [ 0.217949, 3.6615e-2, 0.38352200000000003 ], [ 0.224763, 3.640500000000001e-2, 0.388129 ], [ 0.23153800000000002, 3.640500000000001e-2, 0.39239999999999997 ], [ 0.238273, 3.6621e-2, 0.396353 ], [ 0.244967, 3.7055e-2, 0.400007 ], [ 0.25162, 3.7705e-2, 0.403378 ], [ 0.258234, 3.8571e-2, 0.406485 ], [ 0.26481, 3.9647e-2, 0.40934499999999996 ], [ 0.271347, 4.0922e-2, 0.411976 ], [ 0.27785000000000004, 4.2352999999999995e-2, 0.414392 ], [ 0.284321, 4.3933e-2, 0.416608 ], [ 0.290763, 4.5644000000000004e-2, 0.41863700000000004 ], [ 0.297178, 4.747e-2, 0.420491 ], [ 0.303568, 4.939600000000001e-2, 0.422182 ], [ 0.30993499999999996, 5.1407e-2, 0.423721 ], [ 0.316282, 5.349e-2, 0.42511599999999994 ], [ 0.32261, 5.5633999999999996e-2, 0.426377 ], [ 0.328921, 5.7827e-2, 0.427511 ], [ 0.335217, 6.006e-2, 0.428524 ], [ 0.3415, 6.2325e-2, 0.429425 ], [ 0.347771, 6.461599999999999e-2, 0.430217 ], [ 0.354032, 6.6925e-2, 0.43090599999999996 ], [ 0.360284, 6.924699999999999e-2, 0.43149699999999996 ], [ 0.366529, 7.157899999999999e-2, 0.431994 ], [ 0.372768, 7.3915e-2, 0.4324 ], [ 0.37900100000000003, 7.6253e-2, 0.43271899999999996 ], [ 0.385228, 7.8591e-2, 0.43295500000000003 ], [ 0.391453, 8.0927e-2, 0.43310899999999997 ], [ 0.39767399999999997, 8.3257e-2, 0.433183 ], [ 0.40389400000000003, 8.558e-2, 0.433179 ], [ 0.41011300000000006, 8.7896e-2, 0.43309800000000004 ], [ 0.416331, 9.0203e-2, 0.432943 ], [ 0.42254899999999995, 9.2501e-2, 0.432714 ], [ 0.428768, 9.479e-2, 0.43241199999999996 ], [ 0.434987, 9.706899999999999e-2, 0.43203899999999995 ], [ 0.441207, 9.9338e-2, 0.43159400000000003 ], [ 0.44742800000000005, 0.101597, 0.43108 ], [ 0.45365099999999997, 0.10384800000000001, 0.43049799999999994 ], [ 0.459875, 0.10608900000000002, 0.42984600000000006 ], [ 0.46609999999999996, 0.108322, 0.429125 ], [ 0.47232799999999997, 0.11054699999999999, 0.428334 ], [ 0.47855800000000004, 0.112764, 0.427475 ], [ 0.48478899999999997, 0.11497399999999999, 0.42654800000000004 ], [ 0.49102199999999996, 0.117179, 0.425552 ], [ 0.497257, 0.11937899999999999, 0.42448800000000003 ], [ 0.503493, 0.12157500000000002, 0.42335599999999995 ], [ 0.50973, 0.12376899999999999, 0.42215600000000003 ], [ 0.5159670000000001, 0.12596000000000002, 0.420887 ], [ 0.522206, 0.12815, 0.41954900000000006 ], [ 0.528444, 0.13034099999999998, 0.418142 ], [ 0.534683, 0.13253399999999999, 0.416667 ], [ 0.5409200000000001, 0.13472900000000002, 0.415123 ], [ 0.547157, 0.136929, 0.413511 ], [ 0.553392, 0.139134, 0.411829 ], [ 0.559624, 0.141346, 0.41007800000000005 ], [ 0.5658540000000001, 0.143567, 0.408258 ], [ 0.5720810000000001, 0.145797, 0.40636900000000004 ], [ 0.5783039999999999, 0.14803899999999998, 0.40441099999999996 ], [ 0.584521, 0.15029399999999998, 0.40238500000000005 ], [ 0.590734, 0.152563, 0.40029000000000003 ], [ 0.59694, 0.154848, 0.398125 ], [ 0.603139, 0.15715099999999999, 0.395891 ], [ 0.60933, 0.159474, 0.393589 ], [ 0.615513, 0.16181700000000002, 0.391219 ], [ 0.621685, 0.164184, 0.388781 ], [ 0.627847, 0.166575, 0.38627599999999995 ], [ 0.633998, 0.168992, 0.383704 ], [ 0.640135, 0.171438, 0.381065 ], [ 0.6462600000000001, 0.17391399999999999, 0.378359 ], [ 0.652369, 0.176421, 0.37558600000000003 ], [ 0.658463, 0.178962, 0.37274799999999997 ], [ 0.66454, 0.181539, 0.369846 ], [ 0.670599, 0.184153, 0.366879 ], [ 0.676638, 0.186807, 0.363849 ], [ 0.6826559999999999, 0.18950099999999998, 0.360757 ], [ 0.688653, 0.192239, 0.357603 ], [ 0.694627, 0.195021, 0.354388 ], [ 0.7005760000000001, 0.197851, 0.351113 ], [ 0.7065, 0.20072800000000002, 0.347777 ], [ 0.712396, 0.203656, 0.344383 ], [ 0.718264, 0.206636, 0.340931 ], [ 0.724103, 0.20966999999999997, 0.337424 ], [ 0.7299089999999999, 0.212759, 0.333861 ], [ 0.7356830000000001, 0.21590600000000001, 0.330245 ], [ 0.7414229999999999, 0.21911200000000003, 0.32657600000000003 ], [ 0.747127, 0.22237800000000002, 0.322856 ], [ 0.752794, 0.22570600000000002, 0.319085 ], [ 0.758422, 0.22909700000000002, 0.315266 ], [ 0.7640100000000001, 0.232554, 0.311399 ], [ 0.769556, 0.236077, 0.307485 ], [ 0.7750589999999999, 0.239667, 0.303526 ], [ 0.780517, 0.243327, 0.299523 ], [ 0.785929, 0.247056, 0.295477 ], [ 0.791293, 0.250856, 0.29139 ], [ 0.7966070000000001, 0.25472799999999995, 0.287264 ], [ 0.801871, 0.25867399999999996, 0.283099 ], [ 0.807082, 0.26269200000000004, 0.278898 ], [ 0.8122389999999999, 0.266786, 0.274661 ], [ 0.8173410000000001, 0.27095400000000003, 0.27039 ], [ 0.8223860000000001, 0.275197, 0.266085 ], [ 0.8273720000000001, 0.27951699999999996, 0.26175 ], [ 0.8322990000000001, 0.28391299999999997, 0.25738300000000003 ], [ 0.837165, 0.288385, 0.252988 ], [ 0.841969, 0.292933, 0.248564 ], [ 0.846709, 0.297559, 0.24411299999999997 ], [ 0.851384, 0.30226000000000003, 0.23963600000000002 ], [ 0.855992, 0.30703800000000003, 0.23513299999999998 ], [ 0.860533, 0.311892, 0.230606 ], [ 0.8650059999999999, 0.316822, 0.22605499999999998 ], [ 0.8694089999999999, 0.321827, 0.221482 ], [ 0.8737410000000001, 0.32690600000000003, 0.216886 ], [ 0.878001, 0.33205999999999997, 0.21226799999999998 ], [ 0.882188, 0.337287, 0.207628 ], [ 0.886302, 0.342586, 0.20296799999999998 ], [ 0.890341, 0.34795699999999996, 0.19828600000000002 ], [ 0.8943049999999999, 0.353399, 0.193584 ], [ 0.8981920000000001, 0.358911, 0.18885999999999997 ], [ 0.902003, 0.364492, 0.184116 ], [ 0.905735, 0.37014, 0.17934999999999998 ], [ 0.9093899999999999, 0.375856, 0.174563 ], [ 0.9129659999999999, 0.381636, 0.16975500000000002 ], [ 0.9164619999999999, 0.387481, 0.16492400000000002 ], [ 0.9198790000000001, 0.393389, 0.16007 ], [ 0.9232150000000001, 0.399359, 0.155193 ], [ 0.9264699999999999, 0.405389, 0.150292 ], [ 0.929644, 0.41147900000000004, 0.145367 ], [ 0.932737, 0.41762699999999997, 0.140417 ], [ 0.9357469999999999, 0.423831, 0.13544 ], [ 0.9386749999999999, 0.430091, 0.130438 ], [ 0.941521, 0.436405, 0.125409 ], [ 0.944285, 0.442772, 0.120354 ], [ 0.946965, 0.449191, 0.115272 ], [ 0.949562, 0.45565999999999995, 0.110164 ], [ 0.952075, 0.46217800000000003, 0.10503100000000001 ], [ 0.954506, 0.46874399999999994, 9.9874e-2 ], [ 0.9568519999999999, 0.475356, 9.4695e-2 ], [ 0.9591139999999999, 0.48201400000000005, 8.9499e-2 ], [ 0.9612930000000001, 0.488716, 8.4289e-2 ], [ 0.963387, 0.495462, 7.9073e-2 ], [ 0.965397, 0.5022490000000001, 7.385900000000001e-2 ], [ 0.967322, 0.5090779999999999, 6.8659e-2 ], [ 0.969163, 0.515946, 6.3488e-2 ], [ 0.970919, 0.522853, 5.8367e-2 ], [ 0.97259, 0.529798, 5.3323999999999996e-2 ], [ 0.9741759999999999, 0.53678, 4.8392000000000004e-2 ], [ 0.9756769999999999, 0.543798, 4.3618e-2 ], [ 0.9770920000000001, 0.55085, 3.905e-2 ], [ 0.9784219999999999, 0.557937, 3.4931000000000004e-2 ], [ 0.9796659999999999, 0.565057, 3.1409e-2 ], [ 0.9808239999999999, 0.572209, 2.8508e-2 ], [ 0.9818950000000001, 0.579392, 2.6250000000000002e-2 ], [ 0.9828810000000001, 0.586606, 2.4661e-2 ], [ 0.983779, 0.593849, 2.3769999999999996e-2 ], [ 0.984591, 0.6011219999999999, 2.3606e-2 ], [ 0.9853149999999999, 0.608422, 2.4201999999999998e-2 ], [ 0.9859519999999999, 0.61575, 2.5591999999999997e-2 ], [ 0.986502, 0.623105, 2.7814e-2 ], [ 0.9869640000000001, 0.630485, 3.0908e-2 ], [ 0.9873369999999999, 0.63789, 3.4916e-2 ], [ 0.987622, 0.64532, 3.9886e-2 ], [ 0.987819, 0.652773, 4.5580999999999997e-2 ], [ 0.9879260000000001, 0.66025, 5.175e-2 ], [ 0.9879450000000001, 0.667748, 5.8329000000000006e-2 ], [ 0.987874, 0.6752670000000001, 6.5257e-2 ], [ 0.9877140000000001, 0.682807, 7.2489e-2 ], [ 0.9874639999999999, 0.690366, 7.998999999999999e-2 ], [ 0.987124, 0.697944, 8.773099999999999e-2 ], [ 0.986694, 0.70554, 9.5694e-2 ], [ 0.986175, 0.7131529999999999, 0.103863 ], [ 0.985566, 0.720782, 0.112229 ], [ 0.9848649999999999, 0.728427, 0.120785 ], [ 0.984075, 0.736087, 0.129527 ], [ 0.9831960000000001, 0.7437579999999999, 0.138453 ], [ 0.9822279999999999, 0.751442, 0.147565 ], [ 0.9811730000000001, 0.759135, 0.156863 ], [ 0.9800319999999999, 0.766837, 0.166353 ], [ 0.978806, 0.774545, 0.176037 ], [ 0.977497, 0.782258, 0.185923 ], [ 0.976108, 0.7899740000000001, 0.196018 ], [ 0.974638, 0.797692, 0.20633200000000002 ], [ 0.973088, 0.805409, 0.216877 ], [ 0.971468, 0.8131220000000001, 0.227658 ], [ 0.969783, 0.8208249999999999, 0.238686 ], [ 0.968041, 0.828515, 0.249972 ], [ 0.9662430000000001, 0.836191, 0.261534 ], [ 0.9643940000000001, 0.843848, 0.273391 ], [ 0.9625170000000001, 0.8514760000000001, 0.28554599999999997 ], [ 0.9606260000000001, 0.8590690000000001, 0.29801 ], [ 0.9587199999999999, 0.8666240000000001, 0.31082 ], [ 0.956834, 0.8741289999999999, 0.323974 ], [ 0.954997, 0.881569, 0.337475 ], [ 0.9532149999999999, 0.8889419999999999, 0.351369 ], [ 0.9515460000000001, 0.8962260000000001, 0.36562700000000004 ], [ 0.950018, 0.9034090000000001, 0.380271 ], [ 0.9486829999999999, 0.910473, 0.395289 ], [ 0.9475939999999999, 0.917399, 0.410665 ], [ 0.946809, 0.9241680000000001, 0.426373 ], [ 0.946392, 0.9307610000000001, 0.44236699999999995 ], [ 0.9464029999999999, 0.937159, 0.458592 ], [ 0.946903, 0.943348, 0.47497 ], [ 0.9479369999999999, 0.9493180000000001, 0.491426 ], [ 0.949545, 0.955063, 0.50786 ], [ 0.95174, 0.960587, 0.524203 ], [ 0.954529, 0.9658960000000001, 0.5403610000000001 ], [ 0.9578960000000001, 0.971003, 0.5562750000000001 ], [ 0.9618119999999999, 0.975924, 0.571925 ], [ 0.966249, 0.9806779999999999, 0.587206 ], [ 0.971162, 0.985282, 0.602154 ], [ 0.976511, 0.989753, 0.61676 ], [ 0.982257, 0.9941089999999999, 0.631017 ], [ 0.9883620000000001, 0.9983639999999999, 0.6449239999999999 ] ];
  var inferno = matplotlibScale(_inferno_data);
  exports["inferno"] = inferno;
})(PS["Color.Scale.Perceptual"] = PS["Color.Scale.Perceptual"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Color = PS["Color"];          
  var orange = Color.rgb(255)(152)(0);   
  var indigo = Color.rgb(63)(81)(181);
  exports["orange"] = orange;
  exports["indigo"] = indigo;
})(PS["Color.Scheme.MaterialDesign"] = PS["Color.Scheme.MaterialDesign"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];        
  var when = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 9, column 1 - line 10, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["when"] = when;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];        
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $$Proxy = (function () {
      function Proxy() {

      };
      Proxy.value = new Proxy();
      return Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Array = PS["Data.Array"];
  var Data_String = PS["Data.String"];
  var Type_Proxy = PS["Type.Proxy"];
  var Data_Monoid = PS["Data.Monoid"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigBoolean = (function () {
      function SigBoolean() {

      };
      SigBoolean.value = new SigBoolean();
      return SigBoolean;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var SigArray = (function () {
      function SigArray(value0) {
          this.value0 = value0;
      };
      SigArray.create = function (value0) {
          return new SigArray(value0);
      };
      return SigArray;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  }; 
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, function (x) {
      return new SInt(x);
  });
  var genericBool = new Generic(function (v) {
      if (v instanceof SBoolean) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigBoolean.value;
  }, function (b) {
      return new SBoolean(b);
  });
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var anyProxy = (Type_Proxy["Proxy"]).value;
  var genericArray = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SArray) {
              return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(function ($197) {
                  return fromSpine(dictGeneric)((function (v1) {
                      return v1(Prelude.unit);
                  })($197));
              })(v.value0);
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var lowerProxy = function (v) {
              return anyProxy;
          };
          return new SigArray(function (unit) {
              return toSignature(dictGeneric)(lowerProxy(x));
          });
      }, function (xs) {
          return new SArray(Prelude["<$>"](Prelude.functorArray)(function (x) {
              return function (y) {
                  return toSpine(dictGeneric)(x);
              };
          })(xs));
      });
  };
  var genericMaybe = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SProd && (v.value0 === "Data.Maybe.Just" && v.value1.length === 1)) {
              return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(fromSpine(dictGeneric)(v.value1[0](Prelude.unit)));
          };
          if (v instanceof SProd && (v.value0 === "Data.Maybe.Nothing" && v.value1.length === 0)) {
              return Prelude["return"](Data_Maybe.applicativeMaybe)(Data_Maybe.Nothing.value);
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var mbProxy = function (v) {
              return anyProxy;
          };
          return new SigProd("Data.Maybe.Maybe", [ {
              sigConstructor: "Data.Maybe.Just", 
              sigValues: [ function (u) {
                  return toSignature(dictGeneric)(mbProxy(x));
              } ]
          }, {
              sigConstructor: "Data.Maybe.Nothing", 
              sigValues: [  ]
          } ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Just) {
              return new SProd("Data.Maybe.Just", [ function (u) {
                  return toSpine(dictGeneric)(v.value0);
              } ]);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return new SProd("Data.Maybe.Nothing", [  ]);
          };
          throw new Error("Failed pattern match at Data.Generic line 198, column 7 - line 199, column 7: " + [ v.constructor.name ]);
      });
  };
  exports["SigProd"] = SigProd;
  exports["SigBoolean"] = SigBoolean;
  exports["SigInt"] = SigInt;
  exports["SigArray"] = SigArray;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericInt"] = genericInt;
  exports["genericBool"] = genericBool;
  exports["genericArray"] = genericArray;
  exports["genericMaybe"] = genericMaybe;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v1 instanceof Two && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)) {
                      return new Data_Maybe.Just(v1.value2);
                  };
                  if (v1 instanceof Two && Prelude["<"](dictOrd)(v)(v1.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value0;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Two) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value3;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value1)) {
                      return new Data_Maybe.Just(v1.value2);
                  };
                  if (v1 instanceof Three && Prelude["=="](dictOrd["__superclass_Prelude.Eq_0"]())(v)(v1.value4)) {
                      return new Data_Maybe.Just(v1.value5);
                  };
                  if (v1 instanceof Three && Prelude["<"](dictOrd)(v)(v1.value1)) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value0;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three && (Prelude["<"](dictOrd)(v1.value1)(v) && Prelude["<="](dictOrd)(v)(v1.value4))) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value3;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v1 instanceof Three) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v;
                      var __tco_v1 = v1.value6;
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.Map line 115, column 1 - line 116, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Prelude["++"](Data_List.semigroupList)(keys(v.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value1))(Prelude["++"](Data_List.semigroupList)(keys(v.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 255, column 1 - line 256, column 1: " + [ v.constructor.name ]);
  }; 
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_v1) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return v1;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v1, v.value0.value0, v.value0.value1, v.value0.value2);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v1, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1, v.value0.value3, v.value0.value4, v.value0.value5);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                      var __tco_dictOrd = dictOrd;
                      var __tco_v = v.value1;
                      var __tco_v1 = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, v1);
                      dictOrd = __tco_dictOrd;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.Map line 137, column 1 - line 138, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_dictOrd1) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var dictOrd1 = __copy_dictOrd1;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v instanceof Data_List.Nil) {
                          return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof TwoLeft) {
                          return fromZipper(dictOrd1)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof TwoRight) {
                          return fromZipper(dictOrd1)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof ThreeLeft) {
                          var __tco_dictOrd1 = dictOrd1;
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                          dictOrd1 = __tco_dictOrd1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof ThreeMiddle) {
                          var __tco_dictOrd1 = dictOrd1;
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                          dictOrd1 = __tco_dictOrd1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v instanceof Data_List.Cons && v.value0 instanceof ThreeRight) {
                          var __tco_dictOrd1 = dictOrd1;
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                          dictOrd1 = __tco_dictOrd1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 162, column 3 - line 163, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      var down = function (__copy_dictOrd1) {
          return function (__copy_ctx) {
              return function (__copy_k) {
                  return function (__copy_v) {
                      return function (__copy_v1) {
                          var dictOrd1 = __copy_dictOrd1;
                          var ctx = __copy_ctx;
                          var k = __copy_k;
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          tco: while (true) {
                              if (v1 instanceof Leaf) {
                                  return up(dictOrd1)(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                              };
                              if (v1 instanceof Two && Prelude["=="](dictOrd1["__superclass_Prelude.Eq_0"]())(k)(v1.value1)) {
                                  return fromZipper(dictOrd1)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v1 instanceof Two && Prelude["<"](dictOrd1)(k)(v1.value1)) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if (v1 instanceof Two) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value3;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if (v1 instanceof Three && Prelude["=="](dictOrd1["__superclass_Prelude.Eq_0"]())(k)(v1.value1)) {
                                  return fromZipper(dictOrd1)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              if (v1 instanceof Three && Prelude["=="](dictOrd1["__superclass_Prelude.Eq_0"]())(k)(v1.value4)) {
                                  return fromZipper(dictOrd1)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v1 instanceof Three && Prelude["<"](dictOrd1)(k)(v1.value1)) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if (v1 instanceof Three && (Prelude["<"](dictOrd1)(v1.value1)(k) && Prelude["<="](dictOrd1)(k)(v1.value4))) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value3;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if (v1 instanceof Three) {
                                  var __tco_dictOrd1 = dictOrd1;
                                  var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value6;
                                  dictOrd1 = __tco_dictOrd1;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.Map line 151, column 3 - line 152, column 3: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
      return down(dictOrd)(Data_List.Nil.value);
  };
  var empty = Leaf.value;
  var fromList = function (dictOrd) {
      return Data_Foldable.foldl(Data_List.foldableList)(function (m) {
          return function (v) {
              return insert(dictOrd)(v.value0)(v.value1)(m);
          };
      })(empty);
  };
  exports["keys"] = keys;
  exports["fromList"] = fromList;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["empty"] = empty;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // module Flare
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.renderString = function(target) {
    return function(content) {
      return function() {
        document.getElementById(target).innerHTML = content;
      };
    };
  };

  exports.removeChildren = function(target) {
    return function() {
      var el = document.getElementById(target);

      // http://stackoverflow.com/a/3955238/704831
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
  };

  exports.appendComponent = function(target) {
    return function(el) {
      return function() {
        document.getElementById(target).appendChild(el);
      };
    };
  };

  // This function maintains a global state `window.flareID` to generate unique
  // DOM element IDs. It is only called from functions with a DOM effect.
  function getUniqueID() {
    if (window.flareID === undefined) {
      window.flareID = 0;
    }
    window.flareID = window.flareID + 1;
    return "flare-component-" + window.flareID.toString();
  }

  function createComponent(inputType, elementCallback, eventType, eventListener) {
    return function(label) {
      return function(initial) {
        return function(send) {
          return function() {
            var uid = getUniqueID();
            var el = elementCallback(initial);
            el.className = "flare-input-" + inputType;
            el.id = uid;

            var div = document.createElement("div");
            div.className = "flare-input";

            if (label !== "") {
              var labelEl = document.createElement("label");
              labelEl.htmlFor = uid;
              labelEl.appendChild(document.createTextNode(label));
              div.appendChild(labelEl);
            }

            div.appendChild(el);

            el.addEventListener(eventType, function(e) {
              var value = eventListener(e.target, initial);
              send(value)();
            });

            return div;
          };
        };
      };
    };
  } 

  function clamp(min, max, initial, value) {
    if (isNaN(value)) {
      return initial;
    } else if (value < min) {
      return min;
    } else if (value > max) {
      return max;
    }
    return value;
  }

  exports.cNumberRange = function(type) {
    return function(min) {
      return function(max) {
        return function(step) {
          return createComponent("number-" + type,
            function(initial) {
              var input = document.createElement("input");
              input.type = type;
              input.min = min.toString();
              input.max = max.toString();
              input.step = step.toString();
              input.value = initial.toString();
              return input;
            },
            "input",
            function(t, initial) {
              return clamp(min, max, initial, parseFloat(t.value));
            }
          );
        };
      };
    };
  };

  exports.cIntRange = function(type) {
    return function(min) {
      return function(max) {
        return createComponent("int-" + type,
          function(initial) {
            var input = document.createElement("input");
            input.type = type;
            input.min = min.toString();
            input.max = max.toString();
            input.step = "1";
            input.value = initial.toString();
            return input;
          },
          "input",
          function(t, initial) {
            return clamp(min, max, initial, parseInt(t.value, 10));
          }
        );
      };
    };
  };

  exports.cString = createComponent("string",
    function(initial) {
      var input = document.createElement("input");
      input.type = "text";
      input.value = initial;
      return input;
    },
    "input",
    function(t, initial) {
      return t.value;
    }
  );

  exports.cBoolean = createComponent("boolean",
    function(initial) {
      var input = document.createElement("input");
      input.type = "checkbox";
      input.checked = initial;
      return input;
    },
    "change",
    function(t, initial) {
      return t.checked;
    }
  );

  exports.toFieldset = function(label) {
    return function(elements) {
      var fieldset = document.createElement("fieldset");

      if (label !== "") {
        var legend = document.createElement("legend");
        legend.appendChild(document.createTextNode(label));
        fieldset.appendChild(legend);
      }

      for (var i = 0; i < elements.length; i++) {
        fieldset.appendChild(elements[i]);
      }

      return fieldset;
    };
  };

  exports.cColor = createComponent("color",
    function(initial) {
      var input = document.createElement("input");
      input.type = "color";
      input.value = initial;
      return input;
    },
    "input",
    function(t, initial) {
      return t.value;
    }
  );
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var functorSignal = new Prelude.Functor($foreign.mapSig);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  var applicativeSignal = new Prelude.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan, v) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["send"] = send;
  exports["channel"] = channel;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Flare"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Color = PS["Color"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];        
  var Flare = (function () {
      function Flare(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Flare.create = function (value0) {
          return function (value1) {
              return new Flare(value0, value1);
          };
      };
      return Flare;
  })();
  var UI = function (x) {
      return x;
  };                                             
  var wrap = function (sig) {
      return UI(Prelude["return"](Control_Monad_Eff.applicativeEff)(new Flare([  ], sig)));
  };
  var setupFlare = function (v) {
      return function __do() {
          var v1 = v();
          return {
              components: v1.value0, 
              signal: v1.value1
          };
      };
  };
  var runFlareWith = function (controls) {
      return function (handler) {
          return function (v) {
              return function __do() {
                  var v1 = v();
                  $foreign.removeChildren(controls)();
                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.appendComponent(controls))(v1.value0)();
                  return Signal.runSignal(Prelude.map(Signal.functorSignal)(handler)(v1.value1))();
              };
          };
      };
  };
  var runFlare = function (controls) {
      return function (target) {
          return runFlareWith(controls)($foreign.renderString(target));
      };
  };
  var lift = function (msig) {
      return UI(function __do() {
          var v = msig();
          return new Flare([  ], v);
      });
  };
  var functorFlare = new Prelude.Functor(function (f) {
      return function (v) {
          return new Flare(v.value0, Prelude.map(Signal.functorSignal)(f)(v.value1));
      };
  });
  var functorUI = new Prelude.Functor(function (f) {
      return function (v) {
          return UI(Prelude.map(Control_Monad_Eff.functorEff)(Prelude.map(functorFlare)(f))(v));
      };
  });
  var runFlareShow = function (dictShow) {
      return function (controls) {
          return function (target) {
              return function (ui) {
                  return runFlare(controls)(target)(Prelude["<$>"](functorUI)(Prelude.show(dictShow))(ui));
              };
          };
      };
  };
  var fieldset = function (label) {
      return function (v) {
          return UI(function __do() {
              var v1 = v();
              return new Flare([ $foreign.toFieldset(label)(v1.value0) ], v1.value1);
          });
      };
  };
  var createUI = function (createComp) {
      return function (label) {
          return function ($$default) {
              return UI(function __do() {
                  var v = Signal_Channel.channel($$default)();
                  var v1 = createComp(label)($$default)(Signal_Channel.send(v))();
                  var signal = Signal_Channel.subscribe(v);
                  return new Flare([ v1 ], signal);
              });
          };
      };
  };
  var $$int = function (label) {
      return createUI($foreign.cIntRange("number")(Prelude.bottom(Prelude.boundedInt))(Prelude.top(Prelude.boundedInt)))(label);
  };                                 
  var numberSlider = function (label) {
      return function (min) {
          return function (max) {
              return function (step) {
                  return function ($$default) {
                      return createUI($foreign.cNumberRange("range")(min)(max)(step))(label)($$default);
                  };
              };
          };
      };
  };                       
  var string = createUI($foreign.cString);
  var color = function (label) {
      return function ($$default) {
          return Prelude["<$>"](functorUI)(function ($78) {
              return Data_Maybe.fromMaybe($$default)(Color.fromHexString($78));
          })(createUI($foreign.cColor)(label)(Color.toHexString($$default)));
      };
  };
  var $$boolean = createUI($foreign.cBoolean);
  var applyFlare = new Prelude.Apply(function () {
      return functorFlare;
  }, function (v) {
      return function (v1) {
          return new Flare(Prelude["<>"](Prelude.semigroupArray)(v.value0)(v1.value0), Prelude["<*>"](Signal.applySignal)(v.value1)(v1.value1));
      };
  });
  var applyUI = new Prelude.Apply(function () {
      return functorUI;
  }, function (v) {
      return function (v1) {
          return UI(Control_Apply.lift2(Control_Monad_Eff.applyEff)(Prelude.apply(applyFlare))(v)(v1));
      };
  });
  var applicativeFlare = new Prelude.Applicative(function () {
      return applyFlare;
  }, function (x) {
      return new Flare([  ], Prelude.pure(Signal.applicativeSignal)(x));
  });
  var applicativeUI = new Prelude.Applicative(function () {
      return applyUI;
  }, function (x) {
      return UI(Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.pure(applicativeFlare)(x)));
  });
  exports["runFlareShow"] = runFlareShow;
  exports["runFlare"] = runFlare;
  exports["runFlareWith"] = runFlareWith;
  exports["setupFlare"] = setupFlare;
  exports["lift"] = lift;
  exports["wrap"] = wrap;
  exports["fieldset"] = fieldset;
  exports["color"] = color;
  exports["boolean"] = $$boolean;
  exports["string"] = string;
  exports["int"] = $$int;
  exports["numberSlider"] = numberSlider;
  exports["functorFlare"] = functorFlare;
  exports["applyFlare"] = applyFlare;
  exports["applicativeFlare"] = applicativeFlare;
  exports["functorUI"] = functorUI;
  exports["applyUI"] = applyUI;
  exports["applicativeUI"] = applicativeUI;
})(PS["Flare"] = PS["Flare"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var v = action();
              $foreign.restore(ctx)();
              return v;
          };
      };
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.stroke(ctx)();
              return v;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.fill(ctx)();
              return v;
          };
      };
  };
  exports["withContext"] = withContext;
  exports["fillPath"] = fillPath;
  exports["strokePath"] = strokePath;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["translate"] = $foreign.translate;
  exports["rotate"] = $foreign.rotate;
  exports["scale"] = $foreign.scale;
  exports["clearRect"] = $foreign.clearRect;
  exports["rect"] = $foreign.rect;
  exports["arc"] = $foreign.arc;
  exports["closePath"] = $foreign.closePath;
  exports["moveTo"] = $foreign.moveTo;
  exports["lineTo"] = $foreign.lineTo;
  exports["clip"] = $foreign.clip;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var optionsString = function (v) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.weight) ]);
  };
  var fontString = function (v) {
      return optionsString(v.value2) + (" " + (Prelude.show(Prelude.showInt)(v.value1) + ("px " + v.value0)));
  };
  exports["fontString"] = fontString;
})(PS["Graphics.Drawing.Font"] = PS["Graphics.Drawing.Font"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Color = PS["Color"];
  var Graphics_Drawing_Font = PS["Graphics.Drawing.Font"];
  var $$Math = PS["Math"];
  var Path = (function () {
      function Path(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Path.create = function (value0) {
          return function (value1) {
              return new Path(value0, value1);
          };
      };
      return Path;
  })();
  var Rectangle = (function () {
      function Rectangle(value0) {
          this.value0 = value0;
      };
      Rectangle.create = function (value0) {
          return new Rectangle(value0);
      };
      return Rectangle;
  })();
  var Circle = (function () {
      function Circle(value0) {
          this.value0 = value0;
      };
      Circle.create = function (value0) {
          return new Circle(value0);
      };
      return Circle;
  })();
  var Composite = (function () {
      function Composite(value0) {
          this.value0 = value0;
      };
      Composite.create = function (value0) {
          return new Composite(value0);
      };
      return Composite;
  })();
  var Fill = (function () {
      function Fill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fill.create = function (value0) {
          return function (value1) {
              return new Fill(value0, value1);
          };
      };
      return Fill;
  })();
  var Outline = (function () {
      function Outline(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Outline.create = function (value0) {
          return function (value1) {
              return new Outline(value0, value1);
          };
      };
      return Outline;
  })();
  var Text = (function () {
      function Text(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Text.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Text(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Text;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var Scale = (function () {
      function Scale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return new Scale(value0, value1);
          };
      };
      return Scale;
  })();
  var Translate = (function () {
      function Translate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return new Translate(value0, value1);
          };
      };
      return Translate;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Clipped = (function () {
      function Clipped(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Clipped.create = function (value0) {
          return function (value1) {
              return new Clipped(value0, value1);
          };
      };
      return Clipped;
  })();
  var WithShadow = (function () {
      function WithShadow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WithShadow.create = function (value0) {
          return function (value1) {
              return new WithShadow(value0, value1);
          };
      };
      return WithShadow;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Translate.create({
              translateX: tx, 
              translateY: ty
          });
      };
  }; 
  var semigroupDrawing = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Many) {
              return new Many(Prelude["++"](Data_List.semigroupList)(v.value0)(Data_List.singleton(v1)));
          };
          if (v1 instanceof Many) {
              return new Many(Data_List[":"](v)(v1.value0));
          };
          return new Many(new Data_List.Cons(v, new Data_List.Cons(v1, Data_List.Nil.value)));
      };
  });
  var scale = function (sx) {
      return function (sy) {
          return Scale.create({
              scaleX: sx, 
              scaleY: sy
          });
      };
  };
  var rotate = Rotate.create;
  var render = function (ctx) {
      var renderShape = function (v) {
          if (v instanceof Path && v.value1 instanceof Data_List.Nil) {
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
          };
          if (v instanceof Path && v.value1 instanceof Data_List.Cons) {
              return function __do() {
                  Graphics_Canvas.moveTo(ctx)(v.value1.value0.x)(v.value1.value0.y)();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value1.value1)(function (p1) {
                      return Graphics_Canvas.lineTo(ctx)(p1.x)(p1.y);
                  })();
                  return Control_Monad.when(Control_Monad_Eff.monadEff)(v.value0)(Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx)))();
              };
          };
          if (v instanceof Rectangle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.rect(ctx)(v.value0));
          };
          if (v instanceof Circle) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.arc(ctx)({
                  x: v.value0.x, 
                  y: v.value0.y, 
                  r: v.value0.r, 
                  start: 0.0, 
                  end: $$Math.pi * 2.0
              }));
          };
          if (v instanceof Composite) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value0)(renderShape);
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 312, column 3 - line 313, column 3: " + [ v.constructor.name ]);
      };
      var applyShadow = function (v) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setShadowColor(Color.cssStringHSLA(color))(ctx);
              })();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.blur)(function (blur) {
                  return Graphics_Canvas.setShadowBlur(blur)(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.offset)(function (offset) {
                  return function __do() {
                      Graphics_Canvas.setShadowOffsetX(offset.x)(ctx)();
                      return Graphics_Canvas.setShadowOffsetY(offset.y)(ctx)();
                  };
              })();
          };
      };
      var applyOutlineStyle = function (v) {
          return function __do() {
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setStrokeStyle(Color.cssStringHSLA(color))(ctx);
              })();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.lineWidth)(function (width) {
                  return Graphics_Canvas.setLineWidth(width)(ctx);
              })();
          };
      };
      var applyFillStyle = function (v) {
          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
              return Graphics_Canvas.setFillStyle(Color.cssStringHSLA(color))(ctx);
          });
      };
      var go = function (v) {
          if (v instanceof Fill) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyFillStyle(v.value1)();
                  return Graphics_Canvas.fillPath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Outline) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyOutlineStyle(v.value1)();
                  return Graphics_Canvas.strokePath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Many) {
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(v.value0)(go);
          };
          if (v instanceof Scale) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.scale(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Translate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.translate(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Rotate) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.rotate(v.value0)(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Clipped) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  renderShape(v.value0)();
                  Graphics_Canvas.clip(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof WithShadow) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyShadow(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Text) {
              return Prelude["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(ctx)(function __do() {
                  Graphics_Canvas.setFont(Graphics_Drawing_Font.fontString(v.value0))(ctx)();
                  applyFillStyle(v.value3)();
                  return Graphics_Canvas.fillText(ctx)(v.value4)(v.value1)(v.value2)();
              }));
          };
          throw new Error("Failed pattern match at Graphics.Drawing line 262, column 1 - line 319, column 40: " + [ v.constructor.name ]);
      };
      return go;
  };
  var rectangle = function (x) {
      return function (y) {
          return function (w) {
              return function (h) {
                  return new Rectangle({
                      x: x, 
                      y: y, 
                      w: w, 
                      h: h
                  });
              };
          };
      };
  };
  var path = function (dictFoldable) {
      return function ($152) {
          return Path.create(false)(Data_List.toList(dictFoldable)($152));
      };
  };                                                     
  var lineWidth = function (c) {
      return {
          color: Data_Maybe.Nothing.value, 
          lineWidth: new Data_Maybe.Just(c)
      };
  };
  var filled = Prelude.flip(Fill.create);
  var fillColor = function (c) {
      return {
          color: new Data_Maybe.Just(c)
      };
  };                           
  var circle = function (x) {
      return function (y) {
          return function (r) {
              return new Circle({
                  x: x, 
                  y: y, 
                  r: r
              });
          };
      };
  };
  exports["render"] = render;
  exports["rotate"] = rotate;
  exports["translate"] = translate;
  exports["scale"] = scale;
  exports["filled"] = filled;
  exports["lineWidth"] = lineWidth;
  exports["fillColor"] = fillColor;
  exports["circle"] = circle;
  exports["rectangle"] = rectangle;
  exports["path"] = path;
  exports["semigroupDrawing"] = semigroupDrawing;
})(PS["Graphics.Drawing"] = PS["Graphics.Drawing"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Maybe = PS["Data.Maybe"];
  var Signal_Channel = PS["Signal.Channel"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Flare = PS["Flare"];        
  var runFlareDrawing = function (controls) {
      return function (canvasID) {
          return function (ui) {
              return function __do() {
                  var v = Graphics_Canvas.getCanvasElementById(canvasID)();
                  if (v instanceof Data_Maybe.Just) {
                      var v1 = Graphics_Canvas.getContext2D(v.value0)();
                      var v2 = Graphics_Canvas.getCanvasWidth(v.value0)();
                      var v3 = Graphics_Canvas.getCanvasHeight(v.value0)();
                      var render$prime = function (drawing) {
                          return function __do() {
                              Graphics_Canvas.clearRect(v1)({
                                  x: 0.0, 
                                  y: 0.0, 
                                  w: v2, 
                                  h: v3
                              })();
                              return Graphics_Drawing.render(v1)(drawing)();
                          };
                      };
                      return Flare.runFlareWith(controls)(render$prime)(ui)();
                  };
                  throw new Error("Failed pattern match at Flare.Drawing line 26, column 40 - line 37, column 33: " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["runFlareDrawing"] = runFlareDrawing;
})(PS["Flare.Drawing"] = PS["Flare.Drawing"] || {});
(function(exports) {// module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var every = $foreign.everyP(Signal.constant);
  exports["every"] = every;
  exports["now"] = $foreign.now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {// module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.mousePosP =
    function mousePosP(constant) {
      var out = constant({x:0,y:0});
      window.addEventListener('mousemove', function(e) {
        if (e.pageX !== undefined && e.pageY !== undefined) {
          out.set({x: e.pageX, y: e.pageY});
        } else if (e.clientX !== undefined && e.clientY !== undefined) {
          out.set({
            x: e.clientX + document.body.scrollLeft +
               document.documentElement.scrollLeft,
            y: e.clientY + document.body.scrollTop +
               document.documentElement.scrollTop
          });
        } else {
          throw new Error('Mouse event has no coordinates I recognise!');
        }
      });
      return function() {
        return out;
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };

  exports.windowDimensionsP = function windowDimensionsP(constant) {
    var out = constant({ w: window.innerWidth, h: innerHeight });
    window.addEventListener("resize", function() {
      out.set({ w: window.innerWidth, h: window.innerHeight });
    });
    return function() {
      return out;
    }
  }
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];        
  var windowDimensions = $foreign.windowDimensionsP(Signal.constant);
  var mousePos = $foreign.mousePosP(Signal.constant);      
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["windowDimensions"] = windowDimensions;
  exports["mousePos"] = mousePos;
  exports["keyPressed"] = keyPressed;
  exports["animationFrame"] = animationFrame;
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // module Test.FlareCheck
  // jshint browser: true
  // jshint node: true

  "use strict";

  exports.appendTest = function(parentId) {
    return function(title) {
      return function(doc) {
        return function(elements) {
          return function() {
            var parent = document.getElementById(parentId);
            var fieldset = document.createElement("fieldset");
            fieldset.className = "flarecheck-test";
            var legend = document.createElement("legend");
            legend.textContent = title;
            fieldset.appendChild(legend);

            if (doc !== "") {
              var docEl = document.createElement("p");
              docEl.innerHTML = doc;
              fieldset.appendChild(docEl);
            }

            for (var i = 0; i < elements.length; i++) {
              fieldset.appendChild(elements[i]);
            }

            var output = document.createElement("div");
            output.className = "flarecheck-output";
            fieldset.appendChild(output);

            parent.appendChild(fieldset);

            return output;
          };
        };
      };
    };
  };

  // From http://stackoverflow.com/a/6234804/704831
  exports.escapeHTML = function(unsafe) {
    return unsafe.
       replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  };

  exports.setText = function(output) {
    return function(str) {
      return function() {
        var pre = output.firstChild;
        if (!pre) {
          pre = document.createElement("pre");
          pre.className = "flarecheck-output-settext";
          output.appendChild(pre);
        }
        pre.textContent = str;
      };
    };
  };

  exports.setHTML = function(output) {
    return function(code) {
      return function() {
        output.innerHTML = code;
      };
    };
  };
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Apply = PS["Control.Apply"];        
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Element(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var $bang = function (dictAttributable) {
      return $$with(dictAttributable);
  };
  var text = function (s) {
      return new Content(s, new Return(Prelude.unit));
  }; 
  var parent = function (el) {
      return function (kids) {
          return new Element(el, new Data_Maybe.Just(kids), [  ], new Return(Prelude.unit));
      };
  };
  var functorMarkupM = new Prelude.Functor(function (f) {
      return function (v) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, Prelude.map(functorMarkupM)(f)(v.value3));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.map(functorMarkupM)(f)(v.value1));
          };
          if (v instanceof Return) {
              return new Return(f(v.value0));
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 48, column 3 - line 49, column 3: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var attribute = function (key) {
      return function (value) {
          return new Attribute([ new Attr(key, value) ]);
      };
  };
  var attributableMarkupM = new Attributable(function (v) {
      return function (v1) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, Prelude["<>"](Prelude.semigroupArray)(v.value2)(v1.value0), v.value3);
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 80, column 3 - line 82, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var attributableMarkupMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkupM)(k(m))(xs);
          };
      };
  });
  var monadMarkupM = new Prelude.Monad(function () {
      return applicativeMarkupM;
  }, function () {
      return bindMarkupM;
  });
  var bindMarkupM = new Prelude.Bind(function () {
      return applyMarkupM;
  }, function (v) {
      return function (f) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, Prelude.bind(bindMarkupM)(v.value3)(f));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Prelude.bind(bindMarkupM)(v.value1)(f));
          };
          if (v instanceof Return) {
              return f(v.value0);
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 59, column 3 - line 60, column 3: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyMarkupM = new Prelude.Apply(function () {
      return functorMarkupM;
  }, Prelude.ap(monadMarkupM));
  var applicativeMarkupM = new Prelude.Applicative(function () {
      return applyMarkupM;
  }, Return.create);
  var semigroupMarkupM = new Prelude.Semigroup(function (x) {
      return function (y) {
          return Control_Apply["*>"](applyMarkupM)(x)(y);
      };
  });
  var monoidMarkup = new Data_Monoid.Monoid(function () {
      return semigroupMarkupM;
  }, new Return(Prelude.unit));
  exports["Attr"] = Attr;
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Attributable"] = Attributable;
  exports["!"] = $bang;
  exports["attribute"] = attribute;
  exports["text"] = text;
  exports["parent"] = parent;
  exports["semigroupMarkupM"] = semigroupMarkupM;
  exports["monoidMarkup"] = monoidMarkup;
  exports["functorMarkupM"] = functorMarkupM;
  exports["applyMarkupM"] = applyMarkupM;
  exports["applicativeMarkupM"] = applicativeMarkupM;
  exports["bindMarkupM"] = bindMarkupM;
  exports["monadMarkupM"] = monadMarkupM;
  exports["attributableMarkupM"] = attributableMarkupM;
  exports["attributableMarkupMF"] = attributableMarkupMF;
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var span = Text_Smolder_Markup.parent("span");        
  var pre = Text_Smolder_Markup.parent("pre");
  exports["span"] = span;
  exports["pre"] = pre;
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];   
  var title = Text_Smolder_Markup.attribute("title");
  var className = Text_Smolder_Markup.attribute("class");
  exports["title"] = title;
  exports["className"] = className;
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_Foldable = PS["Data.Foldable"];        
  var Element = (function () {
      function Element(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Element(value0, value1, value2);
              };
          };
      };
      return Element;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var renderAttrs = (function () {
      var toTuple = function (v) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      return function ($18) {
          return Data_Map.fromList(Prelude.ordString)(Prelude.map(Data_List.functorList)(toTuple)(Data_List.toList(Data_Foldable.foldableArray)($18)));
      };
  })();
  var renderMarkup = function (v) {
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Just) {
          return Data_List[":"](new Element(v.value0, renderAttrs(v.value2), renderMarkup(v.value1.value0)))(renderMarkup(v.value3));
      };
      if (v instanceof Text_Smolder_Markup.Element && v.value1 instanceof Data_Maybe.Nothing) {
          return Data_List[":"](new Element(v.value0, renderAttrs(v.value2), Data_List.Nil.value))(renderMarkup(v.value3));
      };
      if (v instanceof Text_Smolder_Markup.Content) {
          return Data_List[":"](new Text(v.value0))(renderMarkup(v.value1));
      };
      if (v instanceof Text_Smolder_Markup.Return) {
          return Data_List.Nil.value;
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.Util line 20, column 1 - line 22, column 1: " + [ v.constructor.name ]);
  };
  exports["Element"] = Element;
  exports["Text"] = Text;
  exports["renderMarkup"] = renderMarkup;
})(PS["Text.Smolder.Renderer.Util"] = PS["Text.Smolder.Renderer.Util"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Map = PS["Data.Map"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Text_Smolder_Renderer_Util = PS["Text.Smolder.Renderer.Util"];
  var Data_Monoid = PS["Data.Monoid"];        
  var renderNode = function (v) {
      if (v instanceof Text_Smolder_Renderer_Util.Element) {
          var showTail = function (v1) {
              if (v1 instanceof Data_List.Nil) {
                  return "/>";
              };
              return ">" + (Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(renderNode)(v1)) + ("</" + (v.value0 + ">")));
          };
          var showAttrs = function (a1) {
              var pair = function (k) {
                  return " " + (k + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v1) {
                      return "=\"" + (v1 + "\"");
                  })(Data_Map.lookup(Prelude.ordString)(k)(a1)));
              };
              return Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(pair)(Data_Map.keys(a1)));
          };
          return "<" + (v.value0 + (showAttrs(v.value1) + showTail(v.value2)));
      };
      if (v instanceof Text_Smolder_Renderer_Util.Text) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 22, column 1 - line 33, column 1: " + [ v.constructor.name ]);
  };
  var render = function ($8) {
      return Data_Foldable.fold(Data_List.foldableList)(Data_Monoid.monoidString)(Prelude.map(Data_List.functorList)(renderNode)(Text_Smolder_Renderer_Util.renderMarkup($8)));
  };
  exports["renderNode"] = renderNode;
  exports["render"] = render;
})(PS["Text.Smolder.Renderer.String"] = PS["Text.Smolder.Renderer.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Test.FlareCheck"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Unsafe = PS["Data.Array.Unsafe"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Global = PS["Global"];
  var Type_Proxy = PS["Type.Proxy"];
  var Signal_Channel = PS["Signal.Channel"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Text_Smolder_Markup_1 = PS["Text.Smolder.Markup"];
  var Text_Smolder_Markup_1 = PS["Text.Smolder.Markup"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Signal = PS["Signal"];
  var Flare = PS["Flare"];
  var SetText = (function () {
      function SetText(value0) {
          this.value0 = value0;
      };
      SetText.create = function (value0) {
          return new SetText(value0);
      };
      return SetText;
  })();
  var SetHTML = (function () {
      function SetHTML(value0) {
          this.value0 = value0;
      };
      SetHTML.create = function (value0) {
          return new SetHTML(value0);
      };
      return SetHTML;
  })();
  var Flammable = function (spark) {
      this.spark = spark;
  };
  var Read = function (defaults, read, typeName) {
      this.defaults = defaults;
      this.read = read;
      this.typeName = typeName;
  };
  var Interactive = function (interactive) {
      this.interactive = interactive;
  };
  var typeName = function (dict) {
      return dict.typeName;
  };
  var tooltip = function (tip) {
      return Text_Smolder_Markup_1["!"](Text_Smolder_Markup_1.attributableMarkupMF)(Text_Smolder_Markup_1["!"](Text_Smolder_Markup_1.attributableMarkupMF)(Text_Smolder_HTML.span)(Text_Smolder_HTML_Attributes.className("flarecheck-tooltip")))(Text_Smolder_HTML_Attributes.title(tip));
  };
  var text = function (s) {
      return Text_Smolder_Markup_1.text($foreign.escapeHTML(s));
  };
  var spark = function (dict) {
      return dict.spark;
  };
  var render = function (output) {
      return function (v) {
          if (v instanceof SetText) {
              return $foreign.setText(output)(v.value0);
          };
          if (v instanceof SetHTML) {
              return $foreign.setHTML(output)(Text_Smolder_Renderer_String.render(v.value0));
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 373, column 1 - line 374, column 1: " + [ output.constructor.name, v.constructor.name ]);
      };
  }; 
  var readInt = new Read(function (v) {
      return "0,1,2";
  }, Data_Int.fromString, function (v) {
      return "Int";
  });
  var read = function (dict) {
      return dict.read;
  };                                                                               
  var interactive = function (dict) {
      return dict.interactive;
  };
  var interactiveFunction = function (dictFlammable) {
      return function (dictInteractive) {
          return new Interactive(function (f) {
              return interactive(dictInteractive)(Prelude["<*>"](Flare.applyUI)(f)(spark(dictFlammable)));
          });
      };
  };
  var highlight = function (syntaxClass) {
      return function (value) {
          return Text_Smolder_Markup_1["!"](Text_Smolder_Markup_1.attributableMarkupMF)(Text_Smolder_HTML.span)(Text_Smolder_HTML_Attributes.className("flarecheck-" + syntaxClass))(text(value));
      };
  };
  var flareDoc$prime = function (dictInteractive) {
      return function (parentId) {
          return function (title) {
              return function (doc) {
                  return function (x) {
                      var flare = interactive(dictInteractive)(Prelude.pure(Flare.applicativeUI)(x));
                      return function __do() {
                          var v = Flare.setupFlare(flare)();
                          var docString = Data_Maybe.fromMaybe("")(doc);
                          var v1 = $foreign.appendTest(parentId)(title)(docString)(v.components)();
                          return Signal.runSignal(Prelude["<$>"](Signal.functorSignal)(render(v1))(v.signal))();
                      };
                  };
              };
          };
      };
  };
  var flareCheck$prime = function (dictInteractive) {
      return function (id) {
          return function (label) {
              return flareDoc$prime(dictInteractive)(id)(label)(Data_Maybe.Nothing.value);
          };
      };
  };
  var flammableString = new Flammable(Flare.string("String")("foo"));
  var flammableInt = new Flammable(Flare["int"]("Int")(1));                                                                                                                                        
  var flammableBoolean = new Flammable(Flare["boolean"]("Boolean")(false));
  var defaults = function (dict) {
      return dict.defaults;
  };
  var csvUI = function (dictRead) {
      var defaults$prime = defaults(dictRead)((Type_Proxy["Proxy"]).value);
      return Prelude["<$>"](Flare.functorUI)(function ($94) {
          return Data_Array.catMaybes(Prelude.map(Prelude.functorArray)(read(dictRead))(Data_String.split(",")($94)));
      })(Flare.string("CSV:")(defaults$prime));
  };
  var flammableArrayRead = function (dictRead) {
      return new Flammable((function () {
          var typeName$prime = typeName(dictRead)((Type_Proxy["Proxy"]).value);
          return Flare.fieldset("Array " + typeName$prime)(csvUI(dictRead));
      })());
  };
  var constructor = function ($$long) {
      var parts = Data_String.split(".")($$long);
      var name = Data_Array_Unsafe.last(parts);
      var modString = (function () {
          var $71 = Data_Array.length(parts) === 1;
          if ($71) {
              return "Data constructor form unknown module";
          };
          if (!$71) {
              return $$long;
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 228, column 7 - line 234, column 1: " + [ $71.constructor.name ]);
      })();
      return tooltip(modString)(highlight("constructor")(name));
  };
  var prettyPrec = function (d) {
      return function (v) {
          if (v instanceof Data_Generic.SProd) {
              var showParen = function (v1) {
                  return function (x) {
                      if (!v1) {
                          return x;
                      };
                      if (v1) {
                          return Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(text("("))(function () {
                              return Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(x)(function () {
                                  return text(")");
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Test.FlareCheck line 244, column 9 - line 245, column 9: " + [ v1.constructor.name, x.constructor.name ]);
                  };
              };
              var $76 = Data_Array["null"](v.value1);
              if ($76) {
                  return constructor(v.value0);
              };
              if (!$76) {
                  return showParen(d > 10)(Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(constructor(v.value0))(function () {
                      return Data_Foldable.for_(Text_Smolder_Markup_1.applicativeMarkupM)(Data_Foldable.foldableArray)(v.value1)(function (f) {
                          return Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(text(" "))(function () {
                              return prettyPrec(11)(f(Prelude.unit));
                          });
                      });
                  }));
              };
              throw new Error("Failed pattern match at Test.FlareCheck line 236, column 3 - line 244, column 3: " + [ $76.constructor.name ]);
          };
          if (v instanceof Data_Generic.SRecord) {
              var recEntry = function (x) {
                  return Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(highlight("record-field")(x.recLabel))(function () {
                      return Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(text(": "))(function () {
                          return prettyPrec(0)(x.recValue(Prelude.unit));
                      });
                  });
              };
              return Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(text("{ "))(function () {
                  return Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Text_Smolder_Markup_1.monoidMarkup)(text(", "))(Prelude.map(Prelude.functorArray)(recEntry)(v.value0)))(function () {
                      return text(" }");
                  });
              });
          };
          if (v instanceof Data_Generic.SBoolean) {
              return tooltip("Boolean")(highlight("boolean")(Prelude.show(Prelude.showBoolean)(v.value0)));
          };
          if (v instanceof Data_Generic.SNumber) {
              return tooltip("Number")(highlight("number")(Prelude.show(Prelude.showNumber)(v.value0)));
          };
          if (v instanceof Data_Generic.SInt) {
              return tooltip("Int")(highlight("number")(Prelude.show(Prelude.showInt)(v.value0)));
          };
          if (v instanceof Data_Generic.SString) {
              var tip = "String of length " + Prelude.show(Prelude.showInt)(Data_String.length(v.value0));
              return tooltip(tip)(highlight("string")(Prelude.show(Prelude.showString)(v.value0)));
          };
          if (v instanceof Data_Generic.SChar) {
              var tip = "Char (with char code " + (Prelude.show(Prelude.showInt)(Data_Char.toCharCode(v.value0)) + ")");
              return tooltip(tip)(highlight("string")(Prelude.show(Prelude.showChar)(v.value0)));
          };
          if (v instanceof Data_Generic.SArray) {
              var tip = "Array of length " + Prelude.show(Prelude.showInt)(Data_Array.length(v.value0));
              return tooltip(tip)(Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(text("["))(function () {
                  return Prelude.bind(Text_Smolder_Markup_1.bindMarkupM)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Text_Smolder_Markup_1.monoidMarkup)(text(", "))(Prelude.map(Prelude.functorArray)(function (x) {
                      return prettyPrec(0)(x(Prelude.unit));
                  })(v.value0)))(function () {
                      return text("]");
                  });
              }));
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 235, column 1 - line 250, column 1: " + [ d.constructor.name, v.constructor.name ]);
      };
  };
  var pretty = prettyPrec(0);
  var prettyPrint = function (dictGeneric) {
      return function ($96) {
          return pretty(Data_Generic.toSpine(dictGeneric)($96));
      };
  };
  var interactiveArray = function (dictGeneric) {
      return new Interactive((function () {
          var classN = function (v) {
              if (v.length === 0) {
                  return "flarecheck-warn";
              };
              return "";
          };
          var markup = function (v) {
              return Text_Smolder_Markup_1["!"](Text_Smolder_Markup_1.attributableMarkupMF)(Text_Smolder_HTML.pre)(Text_Smolder_HTML_Attributes.className(classN(v)))(prettyPrint(Data_Generic.genericArray(dictGeneric))(v));
          };
          return Prelude.map(Flare.functorUI)(function ($97) {
              return SetHTML.create(markup($97));
          });
      })());
  };
  var interactiveBoolean = new Interactive((function () {
      var classN = function (v) {
          if (v) {
              return "flarecheck-okay";
          };
          if (!v) {
              return "flarecheck-warn";
          };
          throw new Error("Failed pattern match at Test.FlareCheck line 302, column 7 - line 304, column 1: " + [ v.constructor.name ]);
      };
      var markup = function (v) {
          return Text_Smolder_Markup_1["!"](Text_Smolder_Markup_1.attributableMarkupMF)(Text_Smolder_HTML.pre)(Text_Smolder_HTML_Attributes.className(classN(v)))(prettyPrint(Data_Generic.genericBool)(v));
      };
      return Prelude.map(Flare.functorUI)(function ($98) {
          return SetHTML.create(markup($98));
      });
  })());
  var interactiveGeneric = function (dictGeneric) {
      return function (ui) {
          return Prelude["<$>"](Flare.functorUI)(function ($101) {
              return SetHTML.create(Text_Smolder_HTML.pre(prettyPrint(dictGeneric)($101)));
          })(ui);
      };
  };                                                                                  
  var interactiveInt = new Interactive(interactiveGeneric(Data_Generic.genericInt));
  var interactiveMaybe = function (dictGeneric) {
      return new Interactive((function () {
          var classN = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return "flarecheck-warn";
              };
              return "";
          };
          var markup = function (v) {
              return Text_Smolder_Markup_1["!"](Text_Smolder_Markup_1.attributableMarkupMF)(Text_Smolder_HTML.pre)(Text_Smolder_HTML_Attributes.className(classN(v)))(prettyPrint(Data_Generic.genericMaybe(dictGeneric))(v));
          };
          return Prelude.map(Flare.functorUI)(function ($103) {
              return SetHTML.create(markup($103));
          });
      })());
  };
  exports["SetText"] = SetText;
  exports["SetHTML"] = SetHTML;
  exports["Interactive"] = Interactive;
  exports["Read"] = Read;
  exports["Flammable"] = Flammable;
  exports["flareCheck'"] = flareCheck$prime;
  exports["interactiveGeneric"] = interactiveGeneric;
  exports["interactive"] = interactive;
  exports["read"] = read;
  exports["defaults"] = defaults;
  exports["typeName"] = typeName;
  exports["spark"] = spark;
  exports["flammableInt"] = flammableInt;
  exports["flammableString"] = flammableString;
  exports["flammableBoolean"] = flammableBoolean;
  exports["readInt"] = readInt;
  exports["flammableArrayRead"] = flammableArrayRead;
  exports["interactiveInt"] = interactiveInt;
  exports["interactiveBoolean"] = interactiveBoolean;
  exports["interactiveMaybe"] = interactiveMaybe;
  exports["interactiveArray"] = interactiveArray;
  exports["interactiveFunction"] = interactiveFunction;
})(PS["Test.FlareCheck"] = PS["Test.FlareCheck"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Math_1 = PS["Math"];
  var Math_1 = PS["Math"];
  var Data_String = PS["Data.String"];
  var Data_Array = PS["Data.Array"];
  var Data_Int = PS["Data.Int"];
  var Signal_Time = PS["Signal.Time"];
  var Signal_DOM = PS["Signal.DOM"];
  var Flare = PS["Flare"];
  var Flare_Drawing = PS["Flare.Drawing"];
  var Color_Scale = PS["Color.Scale"];
  var Color_Scale_Perceptual = PS["Color.Scale.Perceptual"];
  var Color_Scheme_MaterialDesign = PS["Color.Scheme.MaterialDesign"];
  var Test_FlareCheck = PS["Test.FlareCheck"];
  var Graphics_Drawing = PS["Graphics.Drawing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Color = PS["Color"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Signal = PS["Signal"];
  var Data_Generic = PS["Data.Generic"];        
  var pow = function (x) {
      return function (y) {
          return Data_Int.floor(Math_1.pow(Data_Int.toNumber(x))(Data_Int.toNumber(y)));
      };
  };
  var plot = function (m) {
      return function (n1) {
          return function (s) {
              return function (col) {
                  return function (animated) {
                      return function (time) {
                          var time$prime = (function () {
                              if (animated) {
                                  return time;
                              };
                              if (!animated) {
                                  return 0.0;
                              };
                              throw new Error("Failed pattern match at Main line 80, column 21 - line 81, column 13: " + [ animated.constructor.name ]);
                          })();
                          var n3 = s + 3.0 * Math_1.cos(5.0e-3 * time$prime);
                          var n2 = s + 3.0 * Math_1.sin(5.0e-3 * time$prime);
                          var radius = function (phi) {
                              var second = Math_1.pow(Math_1.abs(Math_1.sin((m * phi) / 4.0)))(n3);
                              var first = Math_1.pow(Math_1.abs(Math_1.cos((m * phi) / 4.0)))(n2);
                              var expr = first + second;
                              return 60.0 * Math_1.pow(expr)(-1.0 / n1);
                          };
                          var point = function (phi) {
                              return {
                                  x: 400.0 + radius(phi) * Math_1.cos(phi), 
                                  y: 400.0 + radius(phi) * Math_1.sin(phi)
                              };
                          };
                          var angles = Prelude.map(Prelude.functorArray)(function (i) {
                              return ((2.0 * Math_1.pi) / Data_Int.toNumber(400)) * Data_Int.toNumber(i);
                          })(Data_Array[".."](0)(400));
                          return Graphics_Drawing.filled(Graphics_Drawing.fillColor(col))(Graphics_Drawing.path(Data_Foldable.foldableArray)(Prelude.map(Prelude.functorArray)(point)(angles)));
                      };
                  };
              };
          };
      };
  };
  var superformula = Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(plot)(Flare.numberSlider("m")(2.0)(10.0)(1.0)(5.0)))(Flare.numberSlider("n")(3.0)(10.0)(0.1)(4.0)))(Flare.numberSlider("s")(4.0)(16.0)(0.1)(14.0)))(Flare.color("Fill color")(Color_Scheme_MaterialDesign.indigo)))(Flare["boolean"]("Animated")(false)))(Flare.lift(Signal_DOM.animationFrame));
  var motivation = Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(pow)(Flare["int"]("Base")(2)))(Flare["int"]("Exponent")(8));
  var flareCheck = function (dictInteractive) {
      return function (div) {
          return function (fn) {
              return Test_FlareCheck["flareCheck'"](dictInteractive)("out_" + div)("")(fn);
          };
      };
  };
  var demo = function (fn) {
      return function (suffix) {
          return function (flare) {
              var div_out = "out_" + suffix;
              var div_inp = "inp_" + suffix;
              return fn(div_inp)(div_out)(flare);
          };
      };
  };
  var components = (function () {
      var suffix = function (v) {
          if (v) {
              return "!!!";
          };
          if (!v) {
              return "";
          };
          throw new Error("Failed pattern match at Main line 67, column 5 - line 71, column 1: " + [ v.constructor.name ]);
      };
      var sayHello = function (str) {
          return function (num) {
              return function (shout) {
                  return "<br>Hello " + (str + (" " + (Prelude.show(Prelude.showInt)(num) + suffix(shout))));
              };
          };
      };
      return Prelude["<*>"](Flare.applyUI)(Prelude["<*>"](Flare.applyUI)(Prelude["<$>"](Flare.functorUI)(sayHello)(Flare.string("Name")("LambdaConf")))(Flare["int"]("Year")(2016)))(Flare["boolean"]("Shout")(false));
  })();
  var canvasSize = 800.0;
  var drawClock = function (n) {
      var rad = (0.9 * canvasSize) / 2.0;
      var angle = (Data_Int.toNumber(n) / 60.0) * 2.0 * Math_1.pi;
      return Graphics_Drawing.translate(canvasSize / 2.0)(canvasSize / 2.0)(Prelude["<>"](Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.filled(Graphics_Drawing.fillColor(Color_Scheme_MaterialDesign.orange))(Graphics_Drawing.circle(0.0)(0.0)(rad)))(Graphics_Drawing.rotate(angle)(Graphics_Drawing.filled(Graphics_Drawing.fillColor(Color.black))(Graphics_Drawing.rectangle(-8.0)(0.0)(16.0)(-rad)))));
  };
  var progressBar = function (ratio) {
      return Prelude["<>"](Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.filled(Graphics_Drawing.fillColor(Color.black))(Graphics_Drawing.rectangle(0.0)(0.0)(canvasSize)(100.0)))(Graphics_Drawing.filled(Graphics_Drawing.fillColor(Color_Scale.sample(Color_Scale_Perceptual.inferno)(ratio)))(Graphics_Drawing.rectangle(0.0)(0.0)(ratio * canvasSize)(100.0)));
  };
  var main = function __do() {
      demo(Flare.runFlareShow(Prelude.showInt))("motivation")(motivation)();
      var v = Signal_DOM.mousePos();
      var v1 = Signal_DOM.keyPressed(65)();
      var seconds = Prelude["<$>"](Signal.functorSignal)(function ($17) {
          return Data_Int.floor((function (v2) {
              return v2 / 1000.0;
          })($17));
      })(Signal_Time.every(1000.0));
      var mouseToStr = function (v2) {
          return "(" + (Prelude.show(Prelude.showInt)(v2.x) + (", " + (Prelude.show(Prelude.showInt)(v2.y) + ")")));
      };
      var mousePos$prime = Prelude["<$>"](Signal.functorSignal)(mouseToStr)(v);
      var combine = function (m) {
          return function (s) {
              return function (k) {
                  return m + ("<br>" + (s + ("<br>" + k)));
              };
          };
      };
      var combined = Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(combine)(mousePos$prime))(Prelude["<$>"](Signal.functorSignal)(Prelude.show(Prelude.showInt))(seconds)))(Prelude["<$>"](Signal.functorSignal)(Prelude.show(Prelude.showBoolean))(v1));
      demo(Flare.runFlare)("signals")(Flare.wrap(combined))();
      var clock = Prelude.map(Signal.functorSignal)(drawClock)(seconds);
      demo(Flare_Drawing.runFlareDrawing)("clock")(Flare.wrap(clock))();
      var v2 = Signal_DOM.windowDimensions();
      var windowWidth = Prelude["<$>"](Signal.functorSignal)(function ($18) {
          return Data_Int.toNumber((function (v3) {
              return v3.w;
          })($18));
      })(v2);
      var mousePosX = Prelude["<$>"](Signal.functorSignal)(function ($19) {
          return Data_Int.toNumber((function (v3) {
              return v3.x;
          })($19));
      })(v);
      var ratio = Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(Prelude["/"](Prelude.moduloSemiringNumber))(mousePosX))(windowWidth);
      var progress = Prelude["<$>"](Signal.functorSignal)(progressBar)(ratio);
      demo(Flare_Drawing.runFlareDrawing)("progress")(Flare.wrap(progress))();
      demo(Flare.runFlare)("components")(components)();
      demo(Flare_Drawing.runFlareDrawing)("superformula")(superformula)();
      flareCheck(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableString)(Test_FlareCheck.interactiveInt))("flarecheck_length")(Data_String.length)();
      flareCheck(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableInt)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableString)(Test_FlareCheck.interactiveMaybe(Data_Generic.genericInt))))("flarecheck_charCodeAt")(Data_String.charCodeAt)();
      var xor = function (a) {
          return function (b) {
              return a && !b || !a && b;
          };
      };
      flareCheck(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableBoolean)(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableBoolean)(Test_FlareCheck.interactiveBoolean)))("flarecheck_xor")(xor)();
      return flareCheck(Test_FlareCheck.interactiveFunction(Test_FlareCheck.flammableArrayRead(Test_FlareCheck.readInt))(Test_FlareCheck.interactiveArray(Data_Generic.genericInt)))("flarecheck_filterEven")(Data_Array.filter(Data_Int.even))();
  };
  exports["main"] = main;
  exports["superformula"] = superformula;
  exports["plot"] = plot;
  exports["components"] = components;
  exports["progressBar"] = progressBar;
  exports["drawClock"] = drawClock;
  exports["canvasSize"] = canvasSize;
  exports["motivation"] = motivation;
  exports["pow"] = pow;
  exports["flareCheck"] = flareCheck;
  exports["demo"] = demo;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
